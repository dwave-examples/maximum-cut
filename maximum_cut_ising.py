# Copyright 2019 D-Wave Systems, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ------ Import necessary packages ----
from collections import defaultdict

from dwave.system.samplers import DWaveSampler
from dwave.system.composites import EmbeddingComposite
from matplotlib import pyplot as plt
import networkx as nx

# ------- Set up our graph -------

# Create empty graph
G = nx.Graph()

#--Edges from 100 mstrix-----
all_edges = [(1, 36), (1, 37), (1, 46), (1, 66), (1, 69), (1, 75), (1, 89), (2, 6), (2, 30), (2, 53), (2, 68), (2, 94), (2, 97), (3, 6), (3, 13), (3, 16), (3, 25), (3, 37), (3, 54), (3, 65), (3, 83), (3, 88), (4, 61), (4, 62), (4, 73), (4, 86), (4, 88), (5, 14), (5, 17), (5, 52), (5, 59), (5, 67), (5, 95), (6, 8), (6, 11), (6, 13), (6, 16), (6, 18), (6, 38), (6, 57), (6, 69), (6, 78), (6, 90), (6, 100), (7, 12), (7, 24), (7, 43), (7, 45), (7, 54), (7, 56), (7, 79), (7, 82), (7, 85), (7, 87), (8, 9), (8, 42), (8, 44), (8, 46), (8, 57), (8, 61), (8, 68), (8, 94), (9, 19), (9, 23), (9, 34), (9, 53), (9, 55), (9, 58), (9, 75), (9, 85), (9, 87), (10, 20), (10, 30), (10, 31), (10, 66), (10, 76), (10, 80), (10, 97), (11, 41), (11, 48), (11, 51), (11, 52), (11, 53), (11, 60), (11, 77), (11, 89), (11, 96), (11, 99), (12, 13), (12, 14), (12, 18), (12, 21), (12, 39), (12, 53), (12, 59), (12, 62), (12, 70), (12, 89), (12, 93), (12, 94), (12, 100), (13, 37), (13, 40), (13, 46), (13, 53), (13, 93), (13, 95), (14, 26), (14, 42), (14, 44), (14, 48), (14, 59), (14, 79), (14, 99), (15, 44), (15, 82), (16, 24), (16, 26), (16, 34), (16, 46), (16, 48), (16, 57), (16, 69), (16, 82), (16, 99), (17, 19), (17, 22), (17, 35), (17, 38), (17, 43), (17, 46), (17, 50), (17, 61), (17, 66), (17, 72), (17, 78), (17, 79), (17, 81), (17, 86), (18, 19), (18, 40), (18, 43), (18, 55), (19, 33), (19, 53), (19, 62), (19, 81), (19, 96), (20, 33), (20, 61), (20, 63), (20, 70), (20, 73), (20, 75), (20, 76), (20, 81), (20, 83), (20, 93), (20, 100), (21, 50), (21, 59), (21, 61), (21, 78), (21, 79), (21, 94), (22, 34), (22, 43), (22, 45), (22, 50), (22, 58), (22, 65), (22, 69), (22, 71), (22, 92), (22, 98), (23, 28), (23, 34), (23, 37), (23, 42), (23, 49), (23, 82), (23, 83), (24, 25), (24, 28), (24, 29), (24, 43), (24, 46), (24, 53), (24, 57), (24, 60), (24, 66), (24, 68), (24, 72), (24, 84), (25, 27), (25, 31), (25, 34), (25, 37), (25, 90), (25, 97), (25, 100), (26, 28), (26, 55), (26, 61), (26, 62), (26, 78), (26, 96), (26, 97), (26, 100), (27, 39), (27, 41), (27, 43), (27, 49), (27, 73), (27, 84), (27, 89), (28, 45), (28, 57), (28, 59), (28, 66), (28, 72), (28, 86), (28, 98), (29, 46), (29, 47), (29, 49), (29, 59), (29, 70), (29, 72), (29, 84), (30, 37), (30, 43), (30, 53), (30, 57), (30, 64), (30, 77), (30, 86), (31, 83), (31, 86), (31, 87), (31, 97), (31, 98), (32, 36), (32, 38), (32, 48), (32, 53), (32, 61), (32, 65), (32, 67), (32, 69), (32, 79), (32, 85), (32, 98), (33, 37), (33, 39), (33, 40), (33, 51), (33, 54), (33, 59), (33, 74), (33, 98), (34, 36), (34, 49), (34, 78), (34, 79), (34, 86), (34, 91), (34, 92), (35, 52), (35, 65), (35, 74), (35, 77), (35, 86), (35, 92), (35, 95), (35, 100), (36, 40), (36, 44), (36, 61), (36, 64), (36, 74), (36, 86), (36, 90), (36, 95), (36, 98), (36, 100), (37, 45), (37, 51), (37, 64), (37, 69), (37, 73), (37, 78), (37, 85), (37, 100), (38, 44), (38, 47), (38, 74), (38, 77), (38, 78), (38, 93), (39, 49), (39, 63), (39, 72), (39, 74), (39, 81), (39, 85), (40, 43), (40, 72), (40, 77), (40, 80), (40, 85), (40, 91), (40, 92), (40, 99), (41, 47), (41, 48), (41, 56), (41, 67), (41, 69), (41, 79), (41, 90), (41, 91), (41, 97), (41, 98), (42, 48), (42, 62), (42, 64), (42, 76), (42, 81), (42, 82), (42, 87), (42, 89), (43, 45), (43, 46), (43, 47), (43, 86), (43, 87), (43, 94), (44, 49), (44, 56), (44, 62), (44, 65), (44, 78), (44, 79), (44, 80), (44, 89), (44, 96), (45, 50), (45, 57), (45, 63), (45, 77), (45, 90), (45, 99), (46, 52), (46, 54), (46, 69), (46, 74), (46, 80), (47, 53), (47, 55), (47, 56), (47, 66), (47, 68), (47, 72), (47, 89), (47, 96), (47, 97), (48, 64), (48, 67), (48, 76), (48, 79), (49, 53), (49, 59), (49, 85), (49, 90), (49, 97), (49, 98), (49, 99), (50, 52), (50, 56), (50, 66), (50, 76), (50, 77), (50, 81), (50, 83), (50, 86), (50, 88), (50, 89), (50, 90), (50, 94), (51, 60), (51, 63), (51, 64), (51, 75), (51, 77), (51, 79), (51, 85), (51, 87), (51, 96), (51, 98), (52, 75), (52, 91), (52, 92), (52, 93), (52, 99), (53, 61), (53, 70), (53, 79), (53, 80), (53, 87), (53, 90), (54, 55), (54, 63), (54, 65), (54, 66), (54, 72), (54, 75), (54, 83), (54, 84), (54, 87), (54, 100), (55, 60), (55, 62), (55, 71), (55, 83), (55, 88), (55, 97), (56, 83), (56, 95), (57, 58), (57, 66), (57, 75), (57, 91), (58, 67), (58, 68), (58, 74), (58, 75), (58, 82), (58, 86), (58, 89), (58, 90), (59, 61), (59, 62), (59, 65), (59, 72), (59, 82), (59, 84), (59, 90), (59, 95), (60, 67), (60, 69), (60, 71), (60, 74), (60, 76), (60, 77), (60, 83), (60, 85), (60, 87), (60, 89), (60, 98), (60, 99), (61, 63), (61, 72), (61, 77), (61, 91), (61, 99), (62, 72), (62, 73), (62, 80), (62, 81), (62, 83), (62, 90), (62, 96), (63, 74), (63, 77), (63, 84), (63, 91), (63, 94), (63, 95), (64, 75), (64, 77), (64, 78), (64, 79), (64, 83), (64, 84), (64, 87), (64, 90), (64, 94), (64, 99), (65, 70), (65, 81), (65, 92), (65, 94), (65, 95), (65, 96), (65, 100), (66, 72), (66, 81), (66, 88), (66, 89), (66, 98), (67, 68), (67, 85), (67, 95), (67, 97), (67, 99), (67, 100), (68, 71), (68, 72), (68, 73), (68, 75), (68, 78), (68, 83), (68, 84), (68, 96), (69, 75), (69, 77), (69, 87), (69, 88), (69, 94), (70, 71), (70, 76), (70, 77), (70, 87), (70, 88), (70, 90), (70, 94), (70, 100), (71, 74), (71, 76), (71, 78), (71, 86), (71, 91), (71, 92), (71, 96), (72, 73), (72, 77), (72, 94), (72, 96), (73, 87), (73, 89), (73, 95), (73, 96), (73, 98), (74, 78), (74, 80), (74, 82), (74, 87), (74, 89), (74, 92), (74, 96), (74, 99), (74, 100), (75, 76), (75, 79), (75, 80), (75, 81), (75, 83), (75, 92), (75, 100), (76, 77), (76, 78), (76, 81), (76, 83), (76, 84), (76, 87), (76, 88), (76, 90), (76, 91), (76, 97), (76, 98), (76, 100), (77, 78), (77, 86), (77, 91), (77, 95), (77, 99), (77, 100), (78, 81), (78, 85), (78, 86), (78, 89), (78, 91), (78, 92), (78, 94), (78, 100), (79, 81), (79, 85), (79, 93), (79, 95), (79, 99), (80, 86), (80, 90), (80, 94), (80, 97), (80, 99), (80, 100), (81, 82), (81, 85), (81, 90), (81, 91), (81, 95), (81, 96), (82, 84), (82, 88), (82, 89), (82, 92), (82, 93), (82, 100), (83, 84), (83, 85), (83, 88), (83, 89), (83, 91), (83, 92), (83, 93), (83, 94), (83, 98), (83, 100), (84, 85), (84, 86), (84, 88), (84, 91), (84, 92), (84, 94), (84, 96), (84, 100), (85, 87), (85, 90), (85, 91), (85, 94), (85, 95), (85, 96), (86, 87), (86, 89), (86, 93), (86, 94), (86, 95), (86, 96), (86, 97), (86, 98), (86, 99), (86, 100), (87, 88), (87, 89), (87, 92), (87, 93), (87, 94), (87, 95), (87, 99), (87, 100), (88, 89), (88, 92), (88, 93), (88, 94), (88, 96), (88, 97), (88, 98), (88, 100), (89, 92), (89, 93), (89, 94), (90, 92), (90, 94), (90, 95), (90, 96), (90, 97), (90, 99), (91, 92), (91, 94), (91, 95), (91, 99), (92, 94), (92, 95), (92, 96), (92, 98), (92, 100), (93, 95), (93, 96), (93, 97), (93, 98), (93, 99), (93, 100), (94, 95), (94, 96), (94, 97), (94, 98), (94, 99), (95, 96), (95, 97), (95, 99), (96, 97), (96, 99), (96, 100), (97, 98), (97, 99), (97, 100), (98, 99), (98, 100), (99, 100)]



# Add edges to the graph (also adds nodes)
G.add_edges_from(all_edges)

# ------- Set up our QUBO dictionary -------

# Initialize our h vector, J matrix
h = defaultdict(int)
J = defaultdict(int)

# Update J matrix for every edge in the graph
for i, j in G.edges:
    J[(i,j)]+= 1

# ------- Run our QUBO on the QPU -------
# Set up QPU parameters
chainstrength = 2
numruns = 10

# Run the QUBO on the solver from your config file
sampler = EmbeddingComposite(DWaveSampler())
response = sampler.sample_ising(h, J,
                                chain_strength=chainstrength,
                                num_reads=numruns,
                                label='Example - Maximum Cut Ising')

# ------- Print results to user -------
print('-' * 60)
print('{:>15s}{:>15s}{:^15s}{:^15s}'.format('Set 0','Set 1','Energy','Cut Size'))
print('-' * 60)
for sample, E in response.data(fields=['sample','energy']):
    S0 = [k for k,v in sample.items() if v == -1]
    S1 = [k for k,v in sample.items() if v == 1]
    print('{:>15s}{:>15s}{:^15s}{:^15s}'.format(str(S0),str(S1),str(E),str(int((6-E)/2))))

# ------- Display results to user -------
# Grab best result
# Note: "best" result is the result with the lowest energy
# Note2: the look up table (lut) is a dictionary, where the key is the node index
#   and the value is the set label. For example, lut[5] = 1, indicates that
#   node 5 is in set 1 (S1).
lut = response.first.sample

# Interpret best result in terms of nodes and edges
S0 = [node for node in G.nodes if lut[node]==-1]
S1 = [node for node in G.nodes if lut[node]==1]
cut_edges = [(u, v) for u, v in G.edges if lut[u]!=lut[v]]
uncut_edges = [(u, v) for u, v in G.edges if lut[u]==lut[v]]

# Display best result
pos = nx.spring_layout(G)
nx.draw_networkx_nodes(G, pos, nodelist=S0, node_color='r')
nx.draw_networkx_nodes(G, pos, nodelist=S1, node_color='c')
nx.draw_networkx_edges(G, pos, edgelist=cut_edges, style='dashdot', alpha=0.5, width=3)
nx.draw_networkx_edges(G, pos, edgelist=uncut_edges, style='solid', width=3)
nx.draw_networkx_labels(G, pos)

filename = "maxcut_plot_ising.png"
plt.savefig(filename, bbox_inches='tight')
print("\nYour plot is saved to {}".format(filename))
